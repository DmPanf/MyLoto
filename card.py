from random import randint as rnd

#from tools import generate_unique_numbers
class Card:
    card_rows = 3
    card_cols = 9
    card_nums_in_row = 5
    card_data = None
    card_empty_num = 0
    card_crossed_num = -1
    emj = '‚¨úÔ∏è'

    def __init__(self, i_user):
        uniques_num = self.card_nums_in_row * self.card_rows # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —á–∏—Å–µ–ª 5*3=15
        uniques = random_list(uniques_num)
        self.emj = Game.card_colors[i_user]

        self.card_data = [] #  —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏ 
        for i in range(0, self.card_rows): # –ø–µ—Ä–µ–±–æ—Ä 3 —Ä—è–¥–æ–≤ (–æ—Ç 0 –¥–æ 2)
            tmp = sorted(uniques[self.card_nums_in_row * i: self.card_nums_in_row * (i + 1)]) # —Å–ø–∏—Å–∫–∏ [0:5][5:10][10:15]
            empty_nums_count = self.card_cols - self.card_nums_in_row  # 9-5=4
            for j in range(0, empty_nums_count): # –∑–∞–ø–æ–ª–Ω—è–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –ø—Ä–æ–±–µ–ª–∞–º–∏ (0) –Ω–∞ —Å–ª—É—á–∞–π–Ω—ã—Ö –ø–æ–∑–∏—Ü–∏—è—Ö
                index = rnd(0, len(tmp))
                tmp.insert(index, self.card_empty_num)
            self.card_data += tmp   # —Ñ–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—É—é –∫–∞—Ä—Ç–æ—á–∫—É –¥–ª—è –∏–≥—Ä—ã


    def __str__(self):  # –§—É–Ω–∫—Ü–∏—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏ —Å —á–∏—Å–ª–∞–º–∏ –≥—Ä–∞—Ñ–∏—á–∏—Å–∫–∏–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏
        emj0 = 'üî≤'
        str_line = '„Ä∞Ô∏è' * 26
        result = str_line + '\n'
        for index, num in enumerate(self.card_data):
            if num == self.card_empty_num:      # –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –ø—Ä–æ–±–µ–ª–æ–≤ (=0)
                result +=  self.emj * 2     # '‚¨úÔ∏è‚¨úÔ∏è'
            elif num == self.card_crossed_num:  # –≤–º–µ—Å—Ç–æ –∑–∞—á–µ—Ä–∫–Ω—É—Ç—ã—Ö —á–∏—Å–µ–ª
                result += self.emj + emj0   # '‚¨úÔ∏èüî≤'
            else:
                result += emoji_digits(num, self.emj)

            if (index + 1) % self.card_cols == 0:  # –ü–µ—Ä–µ–≤–æ–¥ —Å—Ç—Ä–æ–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–º —á–∏—Å–ª–æ–º –≤ —Ä—è–¥—É
                result += '\n'
            else:
                result += self.emj          # '‚¨úÔ∏è'
        return result + str_line


    def __contains__(self, item): # –º–µ—Ç–æ–¥ –∫–ª–∞—Å—Å–∞: —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –ª–∏ –∑–∞–¥–∞–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç –≤ –∫–∞—Ä—Ç–æ—á–∫–µ –∏–≥—Ä–æ–∫–∞
        is_contains = item in self.card_data
        return is_contains


    def cross_num(self, num): # —Ñ—É–Ω–∫—Ü–∏—è "–∑–∞—á–µ—Ä–∫–∏–≤–∞–Ω–∏—è" —á–∏—Å–µ–ª –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –ø—Ä–∏ —Å–æ–≤–ø–∞–¥–µ–Ω–∏–∏
        for index, item in enumerate(self.card_data):
            if item == num:
                self.card_data[index] = self.card_crossed_num
                return
        raise ValueError(f'‚ùå –ù–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –Ω–µ—Ç —á–∏—Å–ª–∞: {num}')


    def closed(self) -> bool:  # –µ—Å–ª–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–∞ —Ä–∞–≤–Ω—ã, —Ç–æ –≤—Å–µ —è—á–µ–π–∫–∏ –Ω–∞ –∫–∞—Ä—Ç–æ—á–∫–µ –∑–∞–ø–æ–ª–Ω–µ–Ω—ã, –∏ —Ñ—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True
        is_closed = set(self.card_data) == {self.card_empty_num, self.card_crossed_num}
        return is_closed
